name: Deploy Production
on:
  release:
    types: [published]

jobs:
  build:
    name: Build App
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@master    

      - name: Build
        uses: ./.github/actions/build-application
  
  approveA:
    name: Approve B
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production-approver-A
    steps:
      - name: Get PR Number
        uses: jwalton/gh-find-current-pr@v1
        id: find_pr
        with:
          state: closed

      - name: "Check Valid Approval"
        uses: actions/github-script@v5
        env:
          PR_NUMBER: ${{ steps.find_pr.outputs.number }}
        with:
          script: | 
            let prCommitAuthors = []
            
            // Get the commit object for this PR
            const commits = await github.request(`GET /repos/{owner}/{repo}/pulls/${process.env.PR_NUMBER}/commits`, {
                owner: context.repo.owner,
                repo: context.repo.repo,
            })
            commits.data.forEach(data => prCommitAuthors.push(data.author.login))

            const uniqueAuthors = [...new Set(prCommitAuthors)]

            const approvals = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
            })

            // Empty check
            if (approvals.data.length == 0){
                core.setFailed(`There are no approvals for this deployment. This is not allowed.`);          
                return; 
            }

            // We are only interested in the latest one, which is the first one in the array 
            const latestApproval = approvals.data[0];
            uniqueAuthors.forEach(author => {
                if (latestApproval.user.login == author){
                    core.setFailed(`Deployment to the environment is approved by a Pull Request participant (${author}). Due to compliance issues this is not allowed.`);            
                    return;
                }
            }) 
  
  approveB:
    name: Approve B
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production-approver-B
    steps:
      - name: Get PR Number
        uses: jwalton/gh-find-current-pr@v1
        id: find_pr
        with:
          state: closed

      - name: "Check Valid Approval"
        uses: actions/github-script@v5
        env:
          PR_NUMBER: ${{ steps.find_pr.outputs.number }}
        with:
          script: | 
            let prCommitAuthors = []
            
            // Get the commit object for this PR
            const commits = await github.request(`GET /repos/{owner}/{repo}/pulls/${process.env.PR_NUMBER}/commits`, {
                owner: context.repo.owner,
                repo: context.repo.repo,
            })
            commits.data.forEach(data => prCommitAuthors.push(data.author.login))

            const uniqueAuthors = [...new Set(prCommitAuthors)]

            const approvals = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
            })

            // Empty check
            if (approvals.data.length == 0){
                core.setFailed(`There are no approvals for this deployment. This is not allowed.`);          
                return; 
            }

            // We are only interested in the latest one, which is the first one in the array 
            const latestApproval = approvals.data[0];
            uniqueAuthors.forEach(author => {
                if (latestApproval.user.login == author){
                    core.setFailed(`Deployment to the environment is approved by a Pull Request participant (${author}). Due to compliance issues this is not allowed.`);            
                    return;
                }
            }) 
  
  deploy:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [build, approveA, approveB]
    environment:
      name: production-approver
    steps:
      - name: "Checkout"
        uses: actions/checkout@master  

      - name: Deploy
        uses: ./.github/actions/deploy
